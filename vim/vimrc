"Load bundles"
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

"Colorschemes"
Bundle 'bilalq/jellybeans.vim'
Bundle 'junegunn/seoul256.vim'
Bundle 'sjl/badwolf'
Bundle 'tomasr/molokai'

"Features"
Bundle 'ruby-matchit'
Bundle 'Lokaltog/vim-powerline'
Bundle 'gregsexton/MatchTag'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'embear/vim-localvimrc'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'FredKSchott/CoVim'
Bundle 'kien/ctrlp.vim'
Bundle 'sjl/gundo.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-repeat'
Bundle 'rking/ag.vim'
Bundle 'Valloric/YouCompleteMe'
Bundle 'majutsushi/tagbar'
Bundle 'marijnh/tern_for_vim'
Bundle 'christoomey/vim-tmux-navigator'
Bundle 'mtth/scratch.vim'
Bundle 'airblade/vim-gitgutter'
Bundle 'bilalq/lite-dfm'
Bundle 'junegunn/goyo.vim'
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "garbas/vim-snipmate"
Bundle "honza/vim-snippets"
Bundle 'AndrewRadev/linediff.vim'
"Bundle 'othree/javascript-libraries-syntax.vim'

"Language support"
Bundle 'bilalq/vim-javascript'
Bundle 'elzr/vim-json'
Bundle 'digitaltoad/vim-jade'
Bundle 'wavded/vim-stylus'
Bundle 'kchmck/vim-coffee-script'
Bundle 'pekepeke/titanium-vim'
Bundle 'derekwyatt/vim-scala'
Bundle 'xsbeats/vim-blade'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-liquid'
Bundle 'tpope/vim-haml'
Bundle 'slim-template/vim-slim'

filetype plugin indent on

"Basic settings"
set backspace=2
set wildmenu
set virtualedit=onemore
set number
set mouse=a
set shortmess=I
set pastetoggle=<F2>
set scrolloff=3
set sidescrolloff=3
set clipboard=unnamed
set wildignore+=*/build/*,*.o,*.so,*.swp,*.zip,Gemfile.lock,composer.lock,*.class,*/vendor/*,*/node_modules/*,*.a,

"Colorscheme Settings"
syntax on
set synmaxcol=800
set t_Co=256
let g:seoul256_background=237
"colorscheme seoul256
colorscheme seoul256
hi NonText ctermfg=bg
if g:colors_name == 'tron'
  hi LineNr ctermbg=none
endif
if &diff
  colorscheme jellybeans
  let g:lite_dfm_normal_bg_cterm=237
endif
augroup diffopen
  autocmd!
  autocmd FilterWritePre * if &diff | colorscheme jellybeans | endif
augroup end

"Search settings"
set hlsearch
set incsearch
set showmatch
set ignorecase
set smartcase
augroup hltoggle
  autocmd!
  autocmd InsertEnter * set nohlsearch
  autocmd InsertLeave * set hlsearch
augroup end

"Indentation settings"
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab
set autoindent
set smartindent

"Statusline settings"
set laststatus=2
let g:Powerline_symbols='fancy'
let g:Powerline_cache_enabled=1
call Pl#Theme#InsertSegment('ws_marker', 'after', 'lineinfo')

"Convenience mappings"
inoremap jj <Esc>`^
inoremap JJ <Esc>`^
vnoremap ,, <Esc>
cnoremap w!! %!sudo tee > /dev/null %

"Reasonable line movement"
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

"Repurpose K to search for word under cursor"
nnoremap K :Ag "\b<C-R><C-W>\b"<CR>:cw<CR>

"Shift-tab reverse-indenting"
nnoremap <S-Tab> <<
inoremap <S-Tab> <Esc><<i

"Resize splits when window is resized"
augroup windowResize
  autocmd!
  autocmd VimResized * :wincmd =
augroup end

"Get rid of annoying bell sound"
set noerrorbells visualbell t_vb=

"Gundo settings"
set history=500
let g:gundo_close_on_revert=1

"NERDTree settings"
let NERDTreeIgnore=['\.pyc$', '\~$', '\.rbc$']
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1

"Syntastic settings"
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_mode_map={
\ 'mode': 'active',
\ 'active_filetypes': [],
\ 'passive_filetypes': ['html']
\}

"CtrlP settings"
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_use_caching = 0

"Indent Guide settings"
let g:indent_guides_auto_colors = 0
augroup indentGuide
  autocmd!
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=237
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=238
augroup end

"Snipmate mappings"
imap <C-J> <esc>a<Plug>snipMateNextOrTrigger
smap <C-J> <Plug>snipMateNextOrTrigger

"Filetype specific settings"
augroup typeSpecific
  autocmd!
  autocmd FileType make setlocal noexpandtab
  autocmd FileType java setlocal sw=4 ts=4
  autocmd FileType blade setlocal filetype=blade.html
  autocmd FileType blade hi htmlError ctermfg=186
  autocmd BufNewFile,BufRead Guardfile setlocal ft=ruby
augroup end

"YouCompleteMe settings"
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>', '<Enter>']
let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
set completeopt-=preview
let g:EclimCompletionMethod = 'omnifunc'

"LiteDFM settings"
let g:lite_dfm_keep_ruler=1

"Gitgutter settings"
let g:gitgutter_enabled = 0

"Ctag settings"
set tags=./.coffeetags,.coffeetags,./.rippertags,.rippertags,./.ctaglist,.ctaglist
if executable('coffeetags')
  let g:tagbar_type_coffee = {
  \   'ctagsbin' : 'coffeetags',
  \   'ctagsargs' : '--include-vars',
  \   'kinds' : [
  \     'f:functions',
  \     'o:object',
  \   ],
  \   'sro' : ".",
  \   'kind2scope' : {
  \     'f' : 'object',
  \     'o' : 'object',
  \   }
  \ }
endif
if executable('ripper-tags')
  let g:tagbar_type_ruby = {
  \   'ctagsbin' : 'ripper-tags',
  \   'kinds' : [
  \     'm:modules',
  \     'c:classes',
  \     'd:describes',
  \     'C:contexts',
  \     'f:methods',
  \     'F:singleton methods'
  \   ]
  \ }
endif

"Leader mappings"
let mapleader=","
nnoremap <Leader>l :noh<CR>
nnoremap <Leader>a gt
nnoremap <A :tabprevious<CR>
nnoremap <Leader>n :NERDTreeToggle<CR>:wincmd =<CR>
nnoremap <Leader>D :NERDTreeFind<CR>
nnoremap <Leader>t <Esc>:tabnew<CR>
nnoremap <Leader>= YpVr=
nnoremap <Leader>- :%s/\v[ \t]+$//g<CR>i<Esc>``
nnoremap <Leader>h :GundoToggle<CR><CR>
nnoremap <Leader>f :Ag -i 
nnoremap <Leader>s :ScratchInsert<CR>
nnoremap <Leader>z :LiteDFMToggle<CR>i<Esc>`^
nnoremap <Leader>Z :LiteDFMToggle<CR>:silent !tmux set status > /dev/null 2>&1<CR>:redraw!<CR>
nnoremap <leader>. :CtrlPTag<cr>
nnoremap <leader>b :Tagbar<cr>

"Local vimrc settings"
let g:localvimrc_sandbox=0
let g:localvimrc_whitelist='/Users/bilalq/\(Documents\|Sites\)/.*'


"Temporary settings"
let g:cycle_color = 0
function! ColCycle() 
  execute 'hi LineNr ctermbg=' . g:cycle_color
  let g:cycle_color = g:cycle_color < 255 ? g:cycle_color + 1 : 0
endfunction
command! ColCycle call ColCycle()
nnoremap <Leader>m :ColCycle<CR>
