--recurse=yes
--tag-relative=yes
--exclude=.git
--exclude=target
--exclude=build
--exclude=bin
--exclude=vendor
--exclude=node_modules
--exclude=wp-*
--exclude=*.min.js
-f .ctaglist

--langdef=Clojure
--langmap=Clojure:.clj
--regex-clojure=/\([ \t]*create-ns[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/n,namespace/
--regex-clojure=/\([ \t]*def[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/d,definition/
--regex-clojure=/\([ \t]*defn-?[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/f,function/
--regex-clojure=/\([ \t]*defmacro[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/m,macro/
--regex-clojure=/\([ \t]*definline[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/i,inline/
--regex-clojure=/\([ \t]*defmulti[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/a,multimethod definition/
--regex-clojure=/\([ \t]*defmethod[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/b,multimethod instance/
--regex-clojure=/\([ \t]*defonce[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/c,definition (once)/
--regex-clojure=/\([ \t]*defstruct[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/s,struct/
--regex-clojure=/\([ \t]*intern[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/v,intern/
--regex-clojure=/\([ \t]*ns[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/n,namespace/

--langdef=Scala
--langmap=Scala:.scala
--regex-scala=/^\s*((\<(abstract|final|sealed|implicit|lazy|private|protected)\>|(\[[[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?\]))\s*)*\<class\s+([[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?)/\6/c,classes/e
--regex-scala=/^\s*((\<(abstract|final|sealed|implicit|lazy|private|protected)\>|(\[[[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?\]))\s*)*\<object\s+([[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?)/\6/o,objects/e
--regex-scala=/^\s*((\<(abstract|final|sealed|implicit|lazy|private|protected)\>|(\[[[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?\]))\s*)*\<trait\s+([[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?)/\6/t,traits/e
--regex-scala=/^\s*((\<(abstract|final|sealed|implicit|lazy|private|protected)\>|(\[[[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?\]))\s*)*\<case\s+class\s+([[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?)/\6/m,case-classes/e
--regex-scala=/^\s*((\<(abstract|final|sealed|implicit|lazy|private|protected)\>|(\[[[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?\]))\s*)*\<case\s+object\s+([[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?)/\6/M,case-objects/e
--regex-scala=/^\s*.*\<abstract\>.*\<class\s+(\<[[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?\>)/\1/a,abstract-classes/e
--regex-scala=/^\s*((\<(override|abstract|final|sealed|implicit|lazy|private|protected)\>|(\[[[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?\]))\s*)*\<def\s+([[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?)/\6/f,functions/e
--regex-scala=/^\s*((\<(override|abstract|final|sealed|implicit|lazy|private|protected)\>|(\[[[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?\]))\s*)*\<val\s+([[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?)/\6/V,values/e
--regex-scala=/^\s*((\<(override|abstract|final|sealed|implicit|lazy|private|protected)\>|(\[[[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?\]))\s*)*\<var\s+([[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?)/\6/v,variables/e
--regex-scala=/^\s*((\<(override|abstract|final|sealed|implicit|lazy|private|protected)\>|(\[[[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?\]))\s*)*\<type\s+([[:alpha:]][[:alnum:]]*(_[[:alnum:][:punct:]])?)/\6/T,types/e
--regex-scala=/^\s*\<package\>\s+([[:alpha:]][[:alnum:][:punct:]]*)/\1/p,packages/e
